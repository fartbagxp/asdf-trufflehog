#!/usr/bin/env bash

set -euo pipefail

# different operating systems may have different tool installations to
# run checksums, figure out which one to use to verify checksums.
_sha256sum() {
  local cmd
  if command -v sha256sum &>/dev/null; then
    cmd=(sha256sum)
  elif command -v sha256 &>/dev/null; then
    cmd=(ssha256 -r)
  elif command -v shasum &>/dev/null; then
    cmd=(shasum -a 256)
  else
    echo "ERROR: could not find shasum or sha256sum."
    return 1
  fi

  "${cmd[@]}" "$@"
}

download() {
  if command -v curl &>/dev/null; then
    echo "curl already installed"
  else
    echo "curl not installed! Please install curl before proceeding."
    exit 1
  fi

  if command -v grep &>/dev/null; then
    echo "grep already installed"
    if command -v sha256sum &>/dev/null; then
      echo "sha256sum is installed for verifying checksums"
    elif command -v sha256 &>/dev/null; then
      echo "sha256 is installed for verifying checksums"
    elif command -v shasum &>/dev/null; then
      echo "shasum is installed for verifying checksums"
    else
      echo "No tool {sha256sum, sha256, shasum} to verify checksum found. Install one of the following before proceeding."
    fi
  else
    echo "grep not installed! Please install grep before proceeding."
    exit 1
  fi

  local TRUFFLEHOG_VERSION="$1"
  local TRUFFLEHOG_DOWNLOAD_PATH="${2}"

  os=$(uname -s | tr '[:upper:]' '[:lower:]')
  machine=$(uname -m | tr '[:upper:]' '[:lower:]')

  os_version=""
  case "$os" in
    "linux")
      os_version="linux"
      ;;
    "darwin")
      os_version="darwin"
      ;;
    *)
      # try Windows; if it's not Linux and it's not MacOS, try Windows.
      os_version="windows"
      ;;
  esac

  machine_type=""
  case "$machine" in
    "x86_64")
      machine_type="amd64"
      ;;
    "aarch64")
      machine_type="arm64"
      ;;
    *)
      echo "Architecture not recognized or not supported."
      exit 1
      ;;
  esac

  echo "Determined operating system to be ${os_version}."
  echo "Determined machine type to be ${machine_type}."

  download_file="trufflehog_${TRUFFLEHOG_VERSION}_${os_version}_${machine_type}.tar.gz"
  download_url="https://github.com/trufflesecurity/trufflehog/releases/download/v${TRUFFLEHOG_VERSION}/${download_file}"
  checksum_file="trufflehog_${TRUFFLEHOG_VERSION}_checksums.txt"
  checksum_url="https://github.com/trufflesecurity/trufflehog/releases/download/v${TRUFFLEHOG_VERSION}/${checksum_file}"

  echo "Downloading Trufflehog ${TRUFFLEHOG_VERSION} from $download_url"
  binary_temp_file="${TRUFFLEHOG_DOWNLOAD_PATH}/${download_file}"
  curl -fsSL -o "${binary_temp_file}" "$download_url"
  curl_exit_code=$?

  if [ "$curl_exit_code" -ne 0 ]; then
    echo "Failed to download Trufflehog."
    exit 1
  fi

  echo "Downloading checksum for Trufflehog ${TRUFFLEHOG_VERSION} from ${checksum_url}"
  checksum_temp_file="${TRUFFLEHOG_DOWNLOAD_PATH}/${checksum_file}"
  curl -fsSL -o "${checksum_temp_file}" "${checksum_url}"
  curl_exit_code=$?
  if [ "${curl_exit_code}" -ne 0 ]; then
    echo "Failed to download Trufflehog checksums."
    exit 1
  fi

  echo "Validating checksums"
  cd "${TRUFFLEHOG_DOWNLOAD_PATH}" && grep -e "${download_file}$" "${checksum_file}" | _sha256sum -c && cd -

  echo "Extracting Trufflehog ${TRUFFLEHOG_VERSION} into ${TRUFFLEHOG_DOWNLOAD_PATH}"
  tar -xzf "${binary_temp_file}" -C "${TRUFFLEHOG_DOWNLOAD_PATH}"

  ## catch any accidential deletion if somebody set the wrong temp_dir
  if [ -d "${TRUFFLEHOG_DOWNLOAD_PATH}" ]; then
    if [ -f "${binary_temp_file}" ]; then
      echo "Deleting temp files ${binary_temp_file}."
      rm -rf "$binary_temp_file"
    fi
    if [ -f "${checksum_temp_file}" ]; then
      echo "Deleting temp files ${checksum_temp_file}."
      rm -rf "$checksum_temp_file"
    fi
  fi
}

## Useful for testing this script locally.
# download "3.63.7" "./tmp"
